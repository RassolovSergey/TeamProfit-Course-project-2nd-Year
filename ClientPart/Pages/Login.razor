@page "/login"
@using System.Net.Http.Json
@using ClientPart.Dto
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject ProtectedSessionStorage SessionStorage
@inject ILogger<Login> Logger

<div class="login-container">
    <div class="login-window">
        <div class="login-content">

            <!-- Левая колонка — иллюстрация -->
            <div class="login-left">
                <div class="sign-in-box">
                    <h3>Welcome!</h3>
                    <p>
                        In the TeamProfit app, you can observe, analyze,<br />
                        and manage your project.
                    </p>
                    <img src="/image/picSigningIn.png" alt="Signing In Illustration" />
                </div>
            </div>

            <!-- Правая колонка — форма входа -->
            <div class="login-right">
                <h3 class="signin-title">Signing in</h3>

                <div class="form-field">
                    <label for="login">Login:</label>
                    <input id="login" type="text" @bind="login" />
                </div>
                <div class="form-field">
                    <label for="password">Password:</label>
                    <input id="password" type="password" @bind="password" />
                </div>

                <button class="btn-submit" @onclick="LoginAsync">Signing in</button>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">@errorMessage</div>
                }

                <div class="or-separator"><span>Or Sign In With</span></div>
                <div class="social-login">
                    <img src="/image/IconGoogle.png" alt="Google Sign In" />
                </div>
                <div class="signup-prompt">
                    <span>Don’t you have an account?</span>
                    <NavLink href="/register" class="btn-link">Sign Up</NavLink>
                </div>
            </div>

        </div>
    </div>
</div>

@code {
    private string login = string.Empty;
    private string password = string.Empty;
    private string errorMessage = string.Empty;

    private async Task LoginAsync()
    {
        errorMessage = string.Empty;
        Logger.LogInformation("Login attempt for {Login}", login);

        var dto = new LoginDto { Login = login, Password = password };
        try
        {
            var client = HttpClientFactory.CreateClient("WebApi");
            var response = await client.PostAsJsonAsync("auth/login", dto);
            Logger.LogInformation("Login response status code: {StatusCode}", response.StatusCode);

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadFromJsonAsync<TokenResponse>();
                if (content != null && !string.IsNullOrEmpty(content.Token))
                {
                    await SessionStorage.SetAsync("authToken", content.Token);
                    NavigationManager.NavigateTo("/main");
                }
                else
                {
                    errorMessage = "Failed to retrieve token.";
                    Logger.LogWarning("Token was null or empty in Login response for {Login}", login);
                }
            }
            else
            {
                // Попытаться прочитать сообщение из API
                var error = await TryReadErrorMessage(response);
                errorMessage = error ?? "Login failed. Check credentials.";
                Logger.LogWarning("Login failed for {Login}: {ErrorMessage}", login, errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Logger.LogError(ex, "Exception during login for {Login}", login);
        }
    }

    private async Task<string?> TryReadErrorMessage(HttpResponseMessage response)
    {
        try
        {
            var errorObj = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
            if (errorObj != null && errorObj.TryGetValue("message", out var msg))
                return msg;
        }
        catch { /* ignore parsing errors */ }
        return null;
    }

    private class TokenResponse { public string Token { get; set; } = string.Empty; }
}
