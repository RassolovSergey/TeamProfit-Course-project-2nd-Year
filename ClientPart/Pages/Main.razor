@page "/main"
@using ClientPart.Dto.Project
@using ClientPart.Dto.UserProject
@using ClientPart.Services
@inject ClientPart.Services.AuthorizedHttpClientProvider AuthClientProvider

<div class="main-container">
    <div class="main-box">

        <!-- Левый столбец — 25% ширины -->
        <div class="main-col-left">
            <div class="side-window">
                <!-- Верхняя зона: 20% -->
                <div class="side-top">
                    <div class="user-info">
                        <img src="/image/Avatar.png" alt="User Avatar" class="avatar" />
                        <span class="user-name">Rassolov Sergey</span>
                        <span class="user-id">Id: 00001</span>
                    </div>
                </div>

                <!-- Нижняя зона: 80% -->
                <div class="side-bottom">
                    <div class="inner-light-window">

                        <!-- 1) Блок фильтрации по роли (Mode-селектор) -->
                        <div class="mode-selector">
                            <span class="mode-label">Mode:</span>
                            <div class="mode-buttons">
                                <!-- Кнопки переключения режима Admin / Member -->
                                <button class="@GetRoleBtnClass(RoleFilterType.Admin)"
                                        @onclick="() => SetRoleFilter(RoleFilterType.Admin)">
                                    Admin
                                </button>
                                <button class="@GetRoleBtnClass(RoleFilterType.Member)"
                                        @onclick="() => SetRoleFilter(RoleFilterType.Member)">
                                    Member
                                </button>
                            </div>
                        </div>

                        <!-- 2) Заголовок Your Project -->
                        <div class="section-title">
                            <span class="section-title">Your Project:</span>
                        </div>

                        <!-- 3) Список отфильтрованных проектов -->
                        <div class="projects-list">
                            @if (isLoading)
                            {
                                <p style="color:white">Loading...</p>
                            }
                            else
                            {
                                @if (filteredProjects.Count == 0)
                                {
                                    <p>No projects found.</p>
                                }
                                else
                                {
                                    @foreach (var proj in filteredProjects)
                                    {
                                        <button class="project-item @(proj.Id == selectedProjectId ? "selected" : "")"
                                                @onclick="() => SelectProject(proj.Id)">
                                            @proj.Name
                                        </button>
                                    }
                                }
                            }
                        </div>

                        <!-- 4) Блок фильтрации по статусу проекта -->
                        <div class="filter-selector">
                            <button class="@GetFilterBtnClass(FilterType.PlannedProject)"
                                    @onclick="() => SetFilter(FilterType.PlannedProject)">
                                Planned Projects
                            </button>
                            <button class="@GetFilterBtnClass(FilterType.CurrentProject)"
                                    @onclick="() => SetFilter(FilterType.CurrentProject)">
                                Current Projects
                            </button>
                            <button class="@GetFilterBtnClass(FilterType.CompletedProject)"
                                    @onclick="() => SetFilter(FilterType.CompletedProject)">
                                Completed Projects
                            </button>
                        </div>

                    </div> <!-- inner-light-window -->
                </div> <!-- side-bottom -->
            </div> <!-- side-window -->
        </div> <!-- main-col-left -->
        <!-- Правый столбец — 75% ширины -->
        <div class="main-col-right">

            <!-- Верхняя зона: 10% высоты -->
            <div class="right-top">
                <div class="overview-block">

                    <!-- 1) Имя выделенного проекта -->
                    <div class="overview-item">
                        @if (selectedProject != null)
                        {
                            <span>Project Name:&nbsp;<b>@selectedProject.Name</b></span>
                        }
                        else
                        {
                            <span>Project Name:&nbsp;<i>(none)</i></span>
                        }
                    </div>

                    <!-- 2) Тип (статус) выделенного проекта -->
                    <div class="overview-item">
                        @if (selectedProject != null)
                        {
                            <span>Type Project:&nbsp;<b>@selectedProject.Status</b></span>
                        }
                        else
                        {
                            <span>Type Project:&nbsp;<i>(none)</i></span>
                        }
                    </div>

                    <!-- 3) Роль текущего пользователя в этом проекте -->
                    <div class="overview-item">
                        @if (selectedProject != null)
                        {
                            @* Найдём запись из userProjectRelations по этому ProjectId *@
                            var rel = userProjectRelations.FirstOrDefault(r => r.ProjectId == selectedProject.Id);
                            if (rel != null)
                            {
                                <span>Your Role:&nbsp;<b>@(rel.IsAdmin ? "Admin" : "Member")</b></span>
                            }
                            else
                            {
                                <span>Your Role:&nbsp;<i>(no relation)</i></span>
                            }
                        }
                        else
                        {
                            <span>Your Role:&nbsp;<i>(none)</i></span>
                        }
                    </div>

                </div>
            </div>

            <!-- Нижняя зона -->
            <div class="right-bottom">
                <!-- Здесь можно показать, например, дополнительные детали выбранного проекта -->
            </div>

        </div> <!-- main-col-right -->
    </div> <!-- main-box -->
</div> <!-- main-container -->

@code {
    // ----------------------------------------------
    // 1) HTTP-клиент с авторизацией (Provdider, ProtectedSessionStorage и т.д.)
    // ----------------------------------------------
    [Inject] private AuthorizedHttpClientProvider ApiProvider { get; set; } = default!;

    private List<ProjectDto> userProjects = new();              // все проекты текущего пользователя
    private List<UserProjectDto> userProjectRelations = new();  // связи (User–Project) текущего пользователя
    private List<ProjectDto> filteredProjects = new();          // отфильтрованный итоговый список
    private int? selectedProjectId;  // id выбранного проекта (если нужно)
    private bool isLoading = true;   // флаг загрузки данных
    /// <summary>Хранит сам объект выбранного проекта (или null, если ни один не выбран).</summary>
    private ProjectDto? selectedProject;

    // ----------------------------------------------
    // 3) Перечисления для фильтрации
    // ----------------------------------------------
    /// <summary>Фильтр по статусу проекта</summary>
    enum FilterType
    {
        PlannedProject,    // запланированные
        CurrentProject,    // текущие
        CompletedProject   // завершенные
    }

    /// <summary>Фильтр по роли пользователя в проекте</summary>
    enum RoleFilterType
    {
        Admin,   // пользователь — админ проекта
        Member   // пользователь — просто участник проекта (не админ)
    }

    // текуще выбранный фильтр по статусу (по умолчанию PlannedProject)
    private FilterType selectedFilter = FilterType.PlannedProject;

    // текуще выбранный фильтр по роли (по умолчанию Admin)
    private RoleFilterType selectedRoleFilter = RoleFilterType.Admin;

    // ----------------------------------------------
    // 4) Реакция на переключение фильтра по статусу
    // ----------------------------------------------
    void SetFilter(FilterType type)
    {
        selectedFilter = type;
        ApplyFilters();
    }
    string GetFilterBtnClass(FilterType type)
        => type == selectedFilter ? "filter-btn selected" : "filter-btn";

    // ----------------------------------------------
    // 5) Реакция на переключение фильтра по роли
    // ----------------------------------------------
    void SetRoleFilter(RoleFilterType role)
    {
        selectedRoleFilter = role;
        ApplyFilters();
    }
    string GetRoleBtnClass(RoleFilterType role)
        => role == selectedRoleFilter ? "mode-btn selected" : "mode-btn";

    // ----------------------------------------------
    // 6) Загрузка данных после первого рендеринга
    // ----------------------------------------------
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        var client = await ApiProvider.CreateClientAsync();

        try
        {
            // 1) Загружаем все проекты текущего пользователя
            userProjects = await client
                .GetFromJsonAsync<List<ProjectDto>>("Projects/mine")
                ?? new List<ProjectDto>();

            // 2) Загружаем связи User-Project, чтобы знать, кем пользователь является
            userProjectRelations = await client
                .GetFromJsonAsync<List<UserProjectDto>>("UserProjects/mine")
                ?? new List<UserProjectDto>();

            // 3) Применяем начальную фильтрацию (по фильтрам, установленным по умолчанию)
            ApplyFilters();

            // 4) Если после фильтрации остались проекты, устанавливаем первый как выбранный
            if (filteredProjects.Count > 0)
            {
                var first = filteredProjects[0];
                SelectProject(first.Id);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine("Error loading data: " + ex.Message);
            userProjects = new List<ProjectDto>();
            userProjectRelations = new List<UserProjectDto>();
            filteredProjects = new List<ProjectDto>();
            selectedProject = null;
            selectedProjectId = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // ----------------------------------------------
    // 7) Метод фильтрации (учитывается и статус, и роль)
    // ----------------------------------------------
    /// <summary>Фильтрация проектов по статусу и роли — здесь обновляется filteredProjects.</summary>
    private void ApplyFilters()
    {
        filteredProjects = userProjects
            .Where(p =>
            {
                // a) находим связь текущего пользователя с этим проектом
                var rel = userProjectRelations.FirstOrDefault(r => r.ProjectId == p.Id);
                if (rel == null)
                    return false;

                // b) проверяем “роль”:
                bool roleMatches = selectedRoleFilter == RoleFilterType.Admin
                    ? rel.IsAdmin
                    : !rel.IsAdmin;

                if (!roleMatches)
                    return false;

                // c) проверяем “статус”:
                bool statusMatches = (int)p.Status == (int)selectedFilter;

                return statusMatches;
            })
            .ToList();

        // После того как изменился список filteredProjects, нужно, возможно, скорректировать выбранный проект:
        if (filteredProjects.Count == 0)
        {
            selectedProject = null;
            selectedProjectId = null;
        }
        else
        {
            // Если ранее выбранный проект пропал из новых filteredProjects, выбираем первый
            if (selectedProjectId == null ||
                !filteredProjects.Any(p => p.Id == selectedProjectId.Value))
            {
                var first = filteredProjects[0];
                selectedProjectId = first.Id;
                selectedProject = first;
            }
            else
            {
                // Если ранее выбранный проект всё ещё есть, просто обновим selectedProject
                selectedProject = filteredProjects.First(p => p.Id == selectedProjectId.Value);
            }
        }

        StateHasChanged();
    }

    // ----------------------------------------------
    // 8) Обработчик нажатия на кнопку выбора проекта
    // ----------------------------------------------
    /// <summary>Выбор проекта по его Id. Здесь мы обновляем и selectedProjectId, и сам selectedProject.</summary>
    void SelectProject(int id)
    {
        selectedProjectId = id;

        // Находим объект ProjectDto в списке filteredProjects
        selectedProject = filteredProjects.FirstOrDefault(p => p.Id == id);

        // После смены выбранного проекта, обновляем UI:
        StateHasChanged();
    }
}
