@page "/register"
@using System.Net.Http.Json
@using ClientPart.Dto
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject ILogger<Register> Logger

<div class="login-container">
    <div class="login-window">
        <div class="login-content">

            <!-- Левая колонка (копия sign-in) -->
            <div class="login-left">
                <div class="sign-in-box">
                    <h3>Create Account</h3>
                    <p>
                        In the TeamProfit app, you can observe, analyze,<br />
                        and manage your project.
                    </p>
                    <img src="/image/picSigningIn.png" alt="Illustration" />
                </div>
            </div>

            <!-- Правая колонка: форма регистрации -->
            <div class="login-right">
                <h3 class="signin-title">Sign Up</h3>

                <div class="form-field">
                    <label for="reg-login">Login:</label>
                    <input id="reg-login" type="text" @bind="login" />
                </div>

                <div class="form-field">
                    <label for="reg-email">E-mail:</label>
                    <input id="reg-email" type="text" @bind="email" />
                </div>

                <div class="form-field">
                    <label for="reg-password">Password:</label>
                    <input id="reg-password" type="password" @bind="password" />
                </div>

                <div class="form-field">
                    <label for="reg-confirm-password">Confirm Password:</label>
                    <input id="reg-confirm-password" type="password" @bind="confirmPassword" />
                </div>

                <button class="btn-submit" @onclick="RegisterAsync">Sign Up</button>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">@errorMessage</div>
                }

                <div class="or-separator">
                    <span>Or Register With</span>
                </div>
                <div class="social-login">
                    <img src="/image/IconGoogle.png" alt="Google Sign In" />
                </div>

                <div class="signup-prompt">
                    <span>Already have an account?</span>
                    <NavLink href="/login" class="btn-link">Sign In</NavLink>
                </div>
            </div>

        </div>
    </div>
</div>

@code {
    private string login = string.Empty;
    private string email = string.Empty;
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private string errorMessage = string.Empty;

    private async Task RegisterAsync()
    {
        errorMessage = string.Empty;
        Logger.LogInformation("Registration attempt for {Login}", login);

        if (password != confirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        var dto = new CreateUserDto
            {
                Login = login,
                Email = email,
                Password = password
            };

        try
        {
            var client = HttpClientFactory.CreateClient("WebApi");
            var response = await client.PostAsJsonAsync("auth/register", dto);
            Logger.LogInformation("Register response status code: {StatusCode}", response.StatusCode);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var err = await TryReadErrorMessage(response);
                errorMessage = err ?? "Registration failed.";
                Logger.LogWarning("Registration failed for {Login}: {Error}", login, errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Logger.LogError(ex, "Exception during registration for {Login}", login);
        }
    }

    private async Task<string?> TryReadErrorMessage(HttpResponseMessage response)
    {
        try
        {
            var errorObj = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
            if (errorObj != null && errorObj.TryGetValue("message", out var msg))
                return msg;
        }
        catch { }
        return null;
    }
}
